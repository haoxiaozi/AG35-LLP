/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*
  Copyright (c) 2014-2017 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
=============================================================================*/
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

                  DRExternal Interface header file

GENERAL DESCRIPTION
  This file contains the data structure, functions and variables used for
  handling request and response between DRPlugin component and APDR Solution.

NOTE
  All the function calls (API's) described in this file are non-blocking calls,
  the function should return as soon as the intended activity is completed.

=============================================================================*/
#ifndef _DREXTERNAL_H
#define _DREXTERNAL_H

#include "gps_extended.h"
#include "slim_client_types.h"

typedef struct {
  uint32_t   data_id;
  /* data_id to differentiate
   * types of data stored
  */
  uint32_t   data_len;
  /* data buffer length */
  void      *data_buf;
  /* actual data - memory allocation of this buffer
   * is QDR_CORE responsibility
  */
}QdrStorage_data_t;

/**
 * @brief Report calculated Position by DR position engine.
 *
 * @param LocGpsLocation GPS location position Report.
 * @param GpsLocationExtended GPS extended position Report.
 * @param loc_sess_status location session status.
 * @param LocPosTechMask location position technology mask .
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
typedef bool (*dr_loc_report_callback_t)(LocGpsLocation &locReport,
                                 GpsLocationExtended &locExtendedReport,
                                 enum loc_sess_status status,
                                 LocPosTechMask loc_technology_mask);

/**
 * @brief Report NMEA string generated by DR Engine.
 *
 * @param LocGpsUtcTime  UTC timestamp of NMEA string
 * @param char*       NMEA String
 * @param int         Length of NMEA string
 *
 * @return void
 *
 */
typedef void (* dr_nmea_callback_t)(LocGpsUtcTime timestamp,
                                    const char* nmea, int length);

/**
 * @brief SV Status call back function.
 *
 * @param LocGnssSvStatus  SV Status
 * @param GpsLocationExtended GPS extended position Report.
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
typedef bool (* dr_sv_status_callback_t)(LocGnssSvStatus &sv_info,
                              GpsLocationExtended & gpsLocationExt);


/**
* @brief Read QDR storage data from file system.
*
* @param qdr_storage_t
*  where the storage data will be read and stored.
*
* @return int
*              SUCCESS  -- 0
*              FAILURE  -- -1
*
*/
typedef int32_t (* dr_read_storage_callback_t)(QdrStorage_data_t* qdrInfo);

/**
* @brief Write QDR storage data in to file system.
*
* @param  qdr_storage_t structure of data that will be
*  written to the file system.
*
* @return int
*              SUCCESS -- 0
*              FAILURE -- -1
*
*/
typedef int32_t (* dr_write_storage_callback_t)(QdrStorage_data_t& qdrInfo);

/**
* @brief  Delete QDR storage data from file system.
*
* @param  qdr_storage_t Requested Data ID will
*                 delete from file system.
*
* @return int
*              SUCCESS -- 0
*              FAILURE -- -1
*
*/
typedef int32_t (* dr_delete_storage_callback_t)(QdrStorage_data_t& qdrInfo);

typedef struct {
    size_t size;
    dr_loc_report_callback_t  dr_location_cb;
    dr_nmea_callback_t        dr_nmea_cb;
    dr_sv_status_callback_t   dr_sv_status_cb;
    dr_read_storage_callback_t dr_read_qdr_info_cb;
    dr_write_storage_callback_t dr_write_qdr_info_cb;
    dr_delete_storage_callback_t dr_delete_qdr_info_cb;
}dr_callbacks_t;

/**
 * @brief Initialization function of AP DR engine.
 *        Parameter is the callback function to DRPlugin Component
 *
 * @param dr_callbacks_t Register Callback function for report
 *
 * @return bool In case of success, it return true otherwise false.
 *         true denotes the DR engine is in ready state.
 *
 */
extern bool dr_init(dr_callbacks_t* dr_callbacks);

/**
 * @brief De-initialize DR
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_deInit(void);

/**
 * @brief Start DR Session of AP DR engine
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_startSession(void);

/**
 * @brief Stop DR Session of AP DR engine
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_stopSession(void);

/**
 * @brief Provide GNSS Measurement to DR position engine
 *
 * @param GnssSvMeasurementSet GNSS measurement.
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectSvMeasurement(GnssSvMeasurementSet &svMeasurementSet);

/**
 * @brief Provide GNSS Position to AP DR position engine
 *
 * @param LocGpsLocation GPS location position Report.
 * @param GpsLocationExtended GPS extended position Report.
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectGpsPosition(LocGpsLocation &location,
                                    GpsLocationExtended &locationExtended,
                                    enum loc_sess_status sessStatus,
                                    LocPosTechMask locTechnologyMask);

/**
 * @brief Provide GNSS SV Data to AP DR Engine
 *
 * @param GnssSvPolynomial GNSS SV Polynomial Data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectSvPolynomial(GnssSvPolynomial &svPolynomial);

/**
 * @brief Provide GNSS SV Status to AP DR position engine
 *
 * @param LocGnssSvStatus SV Status Report.
 * @param GpsLocationExtended GPS extended position Report.
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectSvStatus(LocGnssSvStatus &svStatus,
                                    GpsLocationExtended &locationExt);

/**
 * @brief Provide Vehicle Sensor Data to AP DR position engine
 *
 * @param slimServiceEnumT sensor service type
 * @param slimVehicleSensorDataStructT vehicle sensor data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectVehicleSensorData(slimServiceEnumT eService,
                                const slimVehicleSensorDataStructT &zData);

/**
 * @brief Provide Vehicle Motion Data to AP DR position engine
 *
 * @param slimServiceEnumT sensor service type
 * @param slimVehicleMotionDataStructT vehicle motion data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectVehicleMotionData(slimServiceEnumT eService,
                                const slimVehicleMotionDataStructT &zData);

/**
 * @brief Provide Sensor Data to AP DR position engine
 *
 * @param slimServiceEnumT sensor service type
 * @param slimSensorDataStructT sensor data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectSensorData(slimServiceEnumT eService,
                                const slimSensorDataStructT &zData);

/**
 * @brief Pedometer Sensor Data to AP DR position engine
 *
 * @param slimServiceEnumT sensor service type
 * @param slimPedometerDataStructT sensor data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectPedometerData(slimServiceEnumT eService,
                                    const slimPedometerDataStructT &zData);

/**
 * @brief Vehicle  Odometry Sensor Data to AP DR position engine
 *
 * @param slimServiceEnumT sensor service type
 * @param slimVehicleOdometryDataStructT sensor data
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_injectVehicleOdometryData(slimServiceEnumT eService,
                                    const slimVehicleOdometryDataStructT &zData);

/**
 * @brief Delete GNSS SV assistance Data from AP DR engine
 *
 * @param LocGpsAidingData     Flags used to specify which aiding data to delete
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_deleteSvData(LocGpsAidingData aidingData);

/**
 * @brief Set the position mode to DR Engine
 *
 * @param LocGpsPositionRecurrence Periodic|Single shot
 * @param uint32_t min_interval -- minimum interval
 * @param uint32_t preferred_accuracy -- in meters
 * @param uint32_t preferred_time -- in seconds
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_setPositionMode(LocGpsPositionMode  posMode,
                               uint32_t min_interval,
                               uint32_t preferred_accuracy,
                               uint32_t preferred_time,
                               uint32_t dr_constellation_mask);
/**DR constellation Mask*/
#define DR_CONSTELLATION_GPS     0x0001
#define DR_CONSTELLATION_GLO     0x0002
#define DR_CONSTELLATION_BDS     0x0004
#define DR_CONSTELLATION_GAL     0x0008
#define DR_CONSTELLATION_QZSS     0x0010
#define DR_CONSTELLATION_ALL     ( DR_CONSTELLATION_GPS | \
                                   DR_CONSTELLATION_GLO | \
                                   DR_CONSTELLATION_BDS | \
                                   DR_CONSTELLATION_GAL | \
                                   DR_CONSTELLATION_QZSS )
/**
 * @brief Shutdown request for AP DR engine
 *
 * @return bool In case of success, it return true otherwise false.
 *
 */
extern bool dr_shutdown(void);
#endif /*_DREXTERNAL_H*/
